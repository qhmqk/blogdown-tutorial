<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny クックブック</title>
    <link>/</link>
    <description>Recent content on Shiny クックブック</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>© 2018 qhmqk</copyright>
    <lastBuildDate>Wed, 10 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiny app 開発をスタート</title>
      <link>/top-page/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/top-page/</guid>
      <description>Shiny って何？(読み飛ばしてオーケー) R は世界中で広く使用されているプログラミング言語です。Shiny は R のパッケージの一つで、R による分析結果を動的な web アプリケーションとして公開することができます。
R も Shiny もフリーかつオープンソースのソフトウェアとして、開発が進められています。 Rは、多くのプログラミング言語と同様に、Windows、Mac OS、Linuxなどさまざまなプラットフォーム上で動作します。そのため、Shiny による web アプリケーション開発もプラットフォームは問いません。
Shiny を開発しているのは RStudio Inc. で、メインの開発者は RStudio の CTO であるJoe Cheng氏です。
R での分析結果を動的に web アプリケーションにしたい、web アプリケーションに統計や機械学習を組み合わせたい、そんなニーズにこたえる最高の環境が Shiny です。Shiny のインストールから、アプリケーションの作成までを紹介します。
Shiny を始める前のインストール作業 Shiny で web アプリケーション開発を始める人の大半はすでに R のユーザかもしれませんが、Shiny が気になって開発環境を整えたい人もいるかもしれません。R はダウンロードしてインストールすればすぐにプログラミングを始めることができます。さらに、統合開発環境として、これ以上ないくらい便利なRStudioをインストールすれば、エディタから Shiny の動作確認までボタン一つでできるようになります。インストール作業は、3つだけで初期設定の煩雑さはありません。
 R をインストール
 RStudio をインストール
 Shiny パッケージをインストール
  R をインストール CRAN(The Comprehensive R Archive Network)からインストーラをダウンロードします。Linux、Mac、Windowsなどのプラットフォームに合わせてバイナリを選択します。
ダウンロードしたR-***.exeを実行し、ウィザードを進めていけば、インストールが完了します。
RStudio をインストール RStudioの公式サイトからインストーラをダウンロードします。フリーのRStudio Desctop Open Source Licenseを選択し、Windwos、Mac、Linux (Ubuntu, Fedora)などのプラットフォームに合わせたバイナリを選択します。</description>
    </item>
    
    <item>
      <title>索引(アルファベット順)</title>
      <link>/function-index/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/function-index/</guid>
      <description>A  actionButton  B C  checkboxGroupInput
 checkboxInput
  D  dateInput
 dateRangeInput
  E F  fileInput  G H  htmlOutput  I  imageOutput  J K L M N  numericInput  O P  passwordInput
 plotOutput
  Q R  radioButtons
 renderImage
 renderPlot
 renderPrint
 renderTable
 renderText
 renderUI
  S  selectInput</description>
    </item>
    
    <item>
      <title>索引(機能別)</title>
      <link>/reference/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/reference/</guid>
      <description>UI Inputs  actionButton
 checkboxGroupInput
 checkboxInput
 dateInput
 dateRangeInput
 fileInput
 numericInput
 passwordInput
 radioButtons
 selectInput
 sliderInput
 textInput
  UI Outputs  imageOutput
 htmlOutput
 plotOutput
 tableOutput
 textOutput
 uiOutput
 verbatimTextOutput
  UI Layout Rendering functions  renderImage
 renderPlot
 renderPrint
 renderTable
 renderText
 renderUI
  Reactive programming https://shiny.rstudio.com/reference/shiny/1.0.5/</description>
    </item>
    
    <item>
      <title>numericInput</title>
      <link>/numericinput/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/numericinput/</guid>
      <description>numericInput(inputId, label, value, min = NA, max = NA, step = NA, width = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 初期値   min 入力可能な最小値   max 入力可能な最大値   step 最小値と最大値の間のステップ幅   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    値 UI定義に追加する数値入力コントロール
説明 数値を入力するためのコントロールを生成
使用例 もっとも基本的な使い方 1から100までの数値を入力し、その数値をverbatimTextOutputで表示します。
library(shiny) ui &amp;lt;- fluidPage( numericInput(&amp;#34;obs&amp;#34;, &amp;#34;Observations:&amp;#34;, 10, min = 1, max = 100), verbatimTextOutput(&amp;#34;value&amp;#34;) ) server &amp;lt;- function(input, output) { output$value &amp;lt;- renderText({ input$obs }) } shinyApp(ui, server) 埋め込みCSSを使ったサイズ変更 UIのfluidPageに、tagsでCSSを埋め込んでサイズを変更します。</description>
    </item>
    
    <item>
      <title>actionButton</title>
      <link>/actionbutton/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/actionbutton/</guid>
      <description>actionButton(inputId, label, icon = NULL, width = NULL, ...) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label ボタンのコンテンツ。文字列を指定するとテキストラベルになり、HTMLを使って画像を指定することもできます。   icon (オプションで)ボタン上に現れるアイコン   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   ... ボタンに適用する名前付きの属性    説明 初期値がゼロのアクションボタンを生成し、押されるたびに値を1ずつ増やします。
使用例 ボタンにアイコンや画像を設定 iconを指定することで、ボタンのアイコンを設定できます。画像を設定する場合は、tags$imgで画像のURLを指定します。actionButtonと、tags$buttonでclass=btn action-buttonとした場合のHTMLは同じになることを利用します。
このコードでは説明用に、画像への直リンクでボタン上に表示しています。ローカルで実行する限りは問題ありません。しかし、ロゴの著作権はRStudioにあり、直リンクで張り付けたアプリケーションを公開することはできないということに注意してください。
library(shiny) ui &amp;lt;- fluidPage( fluidRow( actionButton(&amp;#34;button1&amp;#34;, &amp;#34;&amp;#34;, icon = icon(&amp;#34;th&amp;#34;)), tags$button( id = &amp;#34;button2&amp;#34;, class=&amp;#34;btn action-button&amp;#34;, icon(&amp;#34;close&amp;#34;) ), tags$button( id = &amp;#34;button3&amp;#34;, class = &amp;#34;btn action-button&amp;#34;, tags$img(src = &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>htmlOutput</title>
      <link>/htmloutput/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/htmloutput/</guid>
      <description>htmlOutput(outputId, inline = FALSE, container = if (inline) span else div, ...) 引数    名前 説明     outputId 値を読み込む出力変数   container テキストを含むHTML要素を生成するための関数   inline インライン(span())またはブロックコンテナ(div())を出力で使用するかどうかを論理値で指定   ... containerのタグ関数に渡す引数。タグで追加のクラスを使うときに有用です。    値 パネル内に含まれるHTML出力要素
説明 アプリケーションのページ内に、HTMLとしてリアクティブな出力変数をレンダリングします。テキストは、HTMLのdivタグ内に含まれ、エスケープされないHTMLコンテンツを含むことを仮定しています。
詳細 uiOutputはサーバ側のrenderUIでの使用を目的としています。現在はhtmlOutputのエイリアスです。
使用例 htmlOutput(&amp;#34;summary&amp;#34;) &amp;lt;div id=&amp;#34;summary&amp;#34; class=&amp;#34;shiny-html-output&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; # Using a custom container and class tags$ul( htmlOutput(&amp;#34;summary&amp;#34;, container = tags$li, class = &amp;#34;custom-li-output&amp;#34;) ) &amp;lt;ul&amp;gt; &amp;lt;li class=&amp;#34;shiny-html-output custom-li-output&amp;#34; id=&amp;#34;summary&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;</description>
    </item>
    
    <item>
      <title>imageOutput</title>
      <link>/imageoutput/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/imageoutput/</guid>
      <description>imageOutput(outputId, width = &amp;#34;100%&amp;#34;, height = &amp;#34;400px&amp;#34;, click = NULL, dblclick = NULL, hover = NULL, hoverDelay = NULL, hoverDelayType = NULL, brush = NULL, clickId = NULL, hoverId = NULL, inline = FALSE) 引数    名前 説明     outputId プロット/画像を読み込む出力変数   width, height 画像の幅と高さ。適切なCSSの単位(&amp;ldquo;100%&amp;ldquo;や&amp;rdquo;400px&amp;rdquo;、&amp;rdquo;auto&amp;rdquo;)を付けて指定します。数値は強制的に&amp;rdquo;px&amp;rdquo;が付けられた値となります。inline = TRUEのとき、2つの引数は無視されて、プロットの幅と高さはrenderPlot()の中で指定されます。HTML/CSSで記述された通りに高さが計算されるため、heightに&amp;rdquo;auto&amp;rdquo;や&amp;rdquo;100%&amp;ldquo;を指定すると期待通りに動かないであろうことに注意して下さい。   click NULL(デフォルト)、文字列、またはclickOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_click&amp;rdquo;(または、等価なclickOpts(id = &amp;quot;plot_click&amp;quot;))のような値を用いると、クリックするたびにプロットが座標をサーバに送信します。値は、input$plot_clickでアクセス可能で、マウスの場所を指すxとyの名前付きのリストです。   dbclick ダブルクリックのイベントに対応する変数で、clickと同様です。   hover clickと同様に、NULL(デフォルト)、文字列、またはhoverOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_hover&amp;rdquo;(または、等価なhoverOpts(id = &amp;quot;plot_hover&amp;quot;))のような値を用いると、プロット上でとどまっている座標をサーバに送信します。値は、input$plot_hoverでアクセス可能で、マウスの場所を指すxとyの名前付きのリストです。hoverの時間と遅延時間を制御するためには、hoverOptsを使う必要があります。   hoverDelay 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   hoverDelayType 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   brush clickと同様に、NULL(デフォルト)、文字列、またはbrushOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_brush&amp;rdquo;(または、等価なbrushOpts(id = &amp;quot;plot_brush&amp;quot;))のような値を用いると、プロット領域内でユーザにブラシさせることができます。ブラシされた領域の情報はサーバに送られ、その値はinput$plot_brushでアクセス可能です。ブラシはユーザがプロット領域で矩形を描いてそれをドラッグすることを意味します。値はブラシ領域を指す名前付きリストで要素にxminとxmax, ymin, ymaxがあります。ブラシの動きを制御するために、brushOptsを使用します。複数のimageOutput/plotOutput呼び出しが、同じid値を共有します。すなわち、ある画像またはプロットをブラシすると、他のブラシも同じidを持つので消えます。   clickId 非推奨で、代わりにclickを使うことが推奨されます。clickOpts関数を参照してください。   hoverId 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   inline 出力にインライン(span())、またはブロックコンテナ(div())を使用します。    値 パネル内に含まれるプロットまたは画像出力要素</description>
    </item>
    
    <item>
      <title>plotOutput</title>
      <link>/plotoutput/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/plotoutput/</guid>
      <description>plotOutput(outputId, width = &amp;#34;100%&amp;#34;, height = &amp;#34;400px&amp;#34;, click = NULL, dblclick = NULL, hover = NULL, hoverDelay = NULL, hoverDelayType = NULL, brush = NULL, clickId = NULL, w1hoverId = NULL, inline = FALSE) 引数    名前 説明     outputId プロット/画像を読み込む出力変数   width, height 画像の幅と高さ。適切なCSSの単位(&amp;ldquo;100%&amp;ldquo;や&amp;rdquo;400px&amp;rdquo;、&amp;rdquo;auto&amp;rdquo;)を付けて指定します。数値は強制的に&amp;rdquo;px&amp;rdquo;が付けられた値となります。inline = TRUEのとき、2つの引数は無視されて、プロットの幅と高さはrenderPlot()の中で指定されます。HTML/CSSで記述された通りに高さが計算されるため、heightに&amp;rdquo;auto&amp;rdquo;や&amp;rdquo;100%&amp;ldquo;を指定すると期待通りに動かないであろうことに注意して下さい。   click NULL(デフォルト)、文字列、またはclickOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_click&amp;rdquo;(または、等価なclickOpts(id = &amp;quot;plot_click&amp;quot;))のような値を用いると、クリックするたびにプロットが座標をサーバに送信します。値は、input$plot_clickでアクセス可能で、マウスの場所を指すxとyの名前付きのリストです。   dbclick ダブルクリックのイベントに対応する変数で、clickと同様です。   hover clickと同様に、NULL(デフォルト)、文字列、またはhoverOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_hover&amp;rdquo;(または、等価なhoverOpts(id = &amp;quot;plot_hover&amp;quot;))のような値を用いると、プロット上でとどまっている座標をサーバに送信します。値は、input$plot_hoverでアクセス可能で、マウスの場所を指すxとyの名前付きのリストです。hoverの時間と遅延時間を制御するためには、hoverOptsを使う必要があります。   hoverDelay 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   hoverDelayType 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   brush clickと同様に、NULL(デフォルト)、文字列、またはbrushOpts関数で生成されるオブジェクトを指定します。&amp;rdquo;plot_brush&amp;rdquo;(または、等価なbrushOpts(id = &amp;quot;plot_brush&amp;quot;))のような値を用いると、プロット領域内でユーザにブラシさせることができます。ブラシされた領域の情報はサーバに送られ、その値はinput$plot_brushでアクセス可能です。ブラシはユーザがプロット領域で矩形を描いてそれをドラッグすることを意味します。値はブラシ領域を指す名前付きリストで要素にxminとxmax, ymin, ymaxがあります。ブラシの動きを制御するために、brushOptsを使用します。複数のimageOutput/plotOutput呼び出しが、同じid値を共有します。すなわち、ある画像またはプロットをブラシすると、他のブラシも同じidを持つので消えます。   clickId 非推奨で、代わりにclickを使うことが推奨されます。clickOpts関数を参照してください。   hoverId 非推奨で、代わりにhoverを使うことが推奨されます。hoverOpts関数を参照してください。   inline 出力にインライン(span())、またはブロックコンテナ(div())を使用します。    値 パネル内に含まれるプロットまたは画像出力要素</description>
    </item>
    
    <item>
      <title>textOutput</title>
      <link>/textoutput/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/textoutput/</guid>
      <description>textOutput(outputId, container = if (inline) span else div, inline = FALSE) 引数    名前 説明     outputId 表を読み込む出力変数   container テキストを含むHTML要素を生成するための関数   inline インライン(span())またはブロックコンテナ(div())を出力で使用するかどうかを論理値で指定    値 パネル内に含まれるテキスト出力要素
説明 アプリケーション内でテキストとしてリアクティブな出力変数をレンダリングします。テキストは、デフォルトで、HTMLのdivタグ内に含まれます。
詳細 テキストは、レンダリングに優先してHTMLをエスケープします。この要素はrenderText出力変数で使用されます。
使用例 h3(textOutput(&amp;#34;caption&amp;#34;)) &amp;lt;h3&amp;gt; &amp;lt;div id=&amp;#34;caption&amp;#34; class=&amp;#34;shiny-text-output&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/h3&amp;gt;
参照 https://shiny.rstudio.com/reference/shiny/1.0.5/textOutput.html</description>
    </item>
    
    <item>
      <title>uiOutput</title>
      <link>/uioutput/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/uioutput/</guid>
      <description>uiOutput(outputId, inline = FALSE, container = if (inline) span else div, ...) 引数    名前 説明     outputId 値を読み込む出力変数   container テキストを含むHTML要素を生成するための関数   inline インライン(span())またはブロックコンテナ(div())を出力で使用するかどうかを論理値で指定   ... containerのタグ関数に渡す引数。タグで追加のクラスを使うときに有用です。    値 パネル内に含まれるHTML出力要素
説明 アプリケーションのページ内に、HTMLとしてリアクティブな出力変数をレンダリングします。テキストは、HTMLのdivタグ内に含まれ、エスケープされないHTMLコンテンツを含むことを仮定しています。
詳細 uiOutputはサーバ側のrenderUIでの使用を目的としています。現在はhtmlOutputのエイリアスです。
使用例 htmlOutput(&amp;#34;summary&amp;#34;) &amp;lt;div id=&amp;#34;summary&amp;#34; class=&amp;#34;shiny-html-output&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; # Using a custom container and class tags$ul( htmlOutput(&amp;#34;summary&amp;#34;, container = tags$li, class = &amp;#34;custom-li-output&amp;#34;) ) &amp;lt;ul&amp;gt; &amp;lt;li class=&amp;#34;shiny-html-output custom-li-output&amp;#34; id=&amp;#34;summary&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/contact/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>質問、反論、脅迫などはフォームからお願いします。
Email  Message   送信</description>
    </item>
    
    <item>
      <title>checkboxGroupInput</title>
      <link>/checkboxgroupinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/checkboxgroupinput/</guid>
      <description>checkboxGroupInput(inputId, label, choices = NULL, selected = NULL, inline = FALSE, width = NULL, choiceNames = NULL, choiceValues = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   choices チェックボックスに表示する値のリスト。リストの要素が名前付けられている場合、値ではなく名前がユーザに表示されます。この引数を指定すると、choiceNamesとchoiceValuesは指定できません。値は文字列で、論理値や数値などの他の型は強制的に文字列になります。   selected 初期状態で選択されている値   inline TRUEなら、選択したものがインラインで表示されます。   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   choiceNames, choiceValues 名前と値のリスト。それぞれアプリケーション内で表示され、それぞれの選択したものに対応します。このため、choiceNamesとchoiceValuesは同じ長さである必要があります。この引数を指定すると、choicesは指定できません。単純なテキストになるchoicesではなく、これら両引数を用いる利点は、choiceNamesには任意の型のUIオブジェクト(タグ、アイコン、HTMLなど)を指定できる点です。例を参照    値 UI定義に追加されるHTML要素のリスト
説明 それぞれ独立で選択できるトグルスイッチ形式のチェックボックスの組を生成します。選択された値の文字列ベクトルが、入力としてサーバに渡されます。
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( checkboxGroupInput(&amp;#34;variable&amp;#34;, &amp;#34;Variables to show:&amp;#34;, c(&amp;#34;Cylinders&amp;#34; = &amp;#34;cyl&amp;#34;, &amp;#34;Transmission&amp;#34; = &amp;#34;am&amp;#34;, &amp;#34;Gears&amp;#34; = &amp;#34;gear&amp;#34;)), tableOutput(&amp;#34;data&amp;#34;) ) server &amp;lt;- function(input, output, session) { output$data &amp;lt;- renderTable({ mtcars[, c(&amp;#34;mpg&amp;#34;, input$variable), drop = FALSE] }, rownames = TRUE) } shinyApp(ui, server) ui &amp;lt;- fluidPage( checkboxGroupInput(&amp;#34;icons&amp;#34;, &amp;#34;Choose icons:&amp;#34;, choiceNames = list(icon(&amp;#34;calendar&amp;#34;), icon(&amp;#34;bed&amp;#34;), icon(&amp;#34;cog&amp;#34;), icon(&amp;#34;bug&amp;#34;)), choiceValues = list(&amp;#34;calendar&amp;#34;, &amp;#34;bed&amp;#34;, &amp;#34;cog&amp;#34;, &amp;#34;bug&amp;#34;) ), textOutput(&amp;#34;txt&amp;#34;) ) server &amp;lt;- function(input, output, session) { output$txt &amp;lt;- renderText({ icons &amp;lt;- paste(input$icons, collapse = &amp;#34;, &amp;#34;) paste(&amp;#34;You chose&amp;#34;, icons) }) } shinyApp(ui, server) }</description>
    </item>
    
    <item>
      <title>checkboxInput</title>
      <link>/checkboxinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/checkboxinput/</guid>
      <description>checkboxInput(inputId, label, value = FALSE, width = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 初期値(論理値でTRUEまたはFALSE)   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    値 UI定義に追加されるチェックボックスのコントロール。
説明 論理値を指定するために使用するチェックボックスを生成。
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( checkboxInput(&amp;#34;somevalue&amp;#34;, &amp;#34;Some value&amp;#34;, FALSE), verbatimTextOutput(&amp;#34;value&amp;#34;) ) server &amp;lt;- function(input, output) { output$value &amp;lt;- renderText({ input$somevalue }) } shinyApp(ui, server) }</description>
    </item>
    
    <item>
      <title>dateInput</title>
      <link>/dateinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/dateinput/</guid>
      <description>dateInput(inputId, label, value = NULL, min = NULL, max = NULL, format = &amp;#34;yyyy-mm-dd&amp;#34;, startview = &amp;#34;month&amp;#34;, weekstart = 0, language = &amp;#34;en&amp;#34;, width = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 開始日。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、NULLならクライアントのタイムゾーンの現在の日付となります。   min 最も昔の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   max 最も後の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   format ブラウザに表示する日付のフォーマット。デフォルトはyyyy-mm-dd。   startview 最初の入力オブジェクトがクリックされたときに表示される日付の範囲。&amp;rdquo;month&amp;rdquo;, &amp;ldquo;year&amp;rdquo;, &amp;ldquo;decade&amp;rdquo;を指定します。デフォルトは&amp;rdquo;month&amp;rdquo;。   weekstart 週の最初の日を0(日曜日)～6(土曜日)の整数で指定します。   language 月と日の名前に使用する言語を指定します。デフォルトは&amp;rdquo;en&amp;rdquo;で英語。他に指定可能な値は、&amp;rdquo;ar&amp;rdquo;, &amp;ldquo;az&amp;rdquo;, &amp;ldquo;bg&amp;rdquo;, &amp;ldquo;bs&amp;rdquo;, &amp;ldquo;ca&amp;rdquo;, &amp;ldquo;cs&amp;rdquo;, &amp;ldquo;cy&amp;rdquo;, &amp;ldquo;da&amp;rdquo;, &amp;ldquo;de&amp;rdquo;, &amp;ldquo;el&amp;rdquo;, &amp;ldquo;en-AU&amp;rdquo;, &amp;ldquo;en-GB&amp;rdquo;, &amp;ldquo;eo&amp;rdquo;, &amp;ldquo;es&amp;rdquo;, &amp;ldquo;et&amp;rdquo;, &amp;ldquo;eu&amp;rdquo;, &amp;ldquo;fa&amp;rdquo;, &amp;ldquo;fi&amp;rdquo;, &amp;ldquo;fo&amp;rdquo;, &amp;ldquo;fr-CH&amp;rdquo;, &amp;ldquo;fr&amp;rdquo;, &amp;ldquo;gl&amp;rdquo;, &amp;ldquo;he&amp;rdquo;, &amp;ldquo;hr&amp;rdquo;, &amp;ldquo;hu&amp;rdquo;, &amp;ldquo;hy&amp;rdquo;, &amp;ldquo;id&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;it-CH&amp;rdquo;, &amp;ldquo;it&amp;rdquo;, &amp;ldquo;ja&amp;rdquo;, &amp;ldquo;ka&amp;rdquo;, &amp;ldquo;kh&amp;rdquo;, &amp;ldquo;kk&amp;rdquo;, &amp;ldquo;ko&amp;rdquo;, &amp;ldquo;kr&amp;rdquo;, &amp;ldquo;lt&amp;rdquo;, &amp;ldquo;lv&amp;rdquo;, &amp;ldquo;me&amp;rdquo;, &amp;ldquo;mk&amp;rdquo;, &amp;ldquo;mn&amp;rdquo;, &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;nb&amp;rdquo;, &amp;ldquo;nl-BE&amp;rdquo;, &amp;ldquo;nl&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;pl&amp;rdquo;, &amp;ldquo;pt-BR&amp;rdquo;, &amp;ldquo;pt&amp;rdquo;, &amp;ldquo;ro&amp;rdquo;, &amp;ldquo;rs-latin&amp;rdquo;, &amp;ldquo;rs&amp;rdquo;, &amp;ldquo;ru&amp;rdquo;, &amp;ldquo;sk&amp;rdquo;, &amp;ldquo;sl&amp;rdquo;, &amp;ldquo;sq&amp;rdquo;, &amp;ldquo;sr-latin&amp;rdquo;, &amp;ldquo;sr&amp;rdquo;, &amp;ldquo;sv&amp;rdquo;, &amp;ldquo;sw&amp;rdquo;, &amp;ldquo;th&amp;rdquo;, &amp;ldquo;tr&amp;rdquo;, &amp;ldquo;uk&amp;rdquo;, &amp;ldquo;vi&amp;rdquo;, &amp;ldquo;zh-CN&amp;rdquo;, &amp;ldquo;zh-TW&amp;rdquo;。   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    説明 クリックすると日付選択できるカレンダーが表示されるテキスト入力を生成。</description>
    </item>
    
    <item>
      <title>dateRangeInput</title>
      <link>/daterangeinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/daterangeinput/</guid>
      <description>dateRangeInput(inputId, label, start = NULL, end = NULL, min = NULL, max = NULL, format = &amp;#34;yyyy-mm-dd&amp;#34;, startview = &amp;#34;month&amp;#34;, weekstart = 0, language = &amp;#34;en&amp;#34;, separator = &amp;#34; to &amp;#34;, width = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label ボタンのコンテンツ。文字列を指定するとテキストラベルになり、HTMLを使って画像を指定することもできます。   start 開始日の初期値。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、現在のタイムゾーンの値が入ります。   end 終了日の初期値。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、現在のタイムゾーンの値が入ります。   min 最も昔の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   max 最も後の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   format ブラウザに表示する日付のフォーマット。デフォルトはyyyy-mm-dd。   startview 最初の入力オブジェクトがクリックされたときに表示される日付の範囲。&amp;rdquo;month&amp;rdquo;, &amp;ldquo;year&amp;rdquo;, &amp;ldquo;decade&amp;rdquo;を指定します。デフォルトは&amp;rdquo;month&amp;rdquo;。   weekstart 週の最初の日を0(日曜日)～6(土曜日)の整数で指定します。   language 月と日の名前に使用する言語を指定します。デフォルトは&amp;rdquo;en&amp;rdquo;で英語。他に指定可能な値は、&amp;rdquo;ar&amp;rdquo;, &amp;ldquo;az&amp;rdquo;, &amp;ldquo;bg&amp;rdquo;, &amp;ldquo;bs&amp;rdquo;, &amp;ldquo;ca&amp;rdquo;, &amp;ldquo;cs&amp;rdquo;, &amp;ldquo;cy&amp;rdquo;, &amp;ldquo;da&amp;rdquo;, &amp;ldquo;de&amp;rdquo;, &amp;ldquo;el&amp;rdquo;, &amp;ldquo;en-AU&amp;rdquo;, &amp;ldquo;en-GB&amp;rdquo;, &amp;ldquo;eo&amp;rdquo;, &amp;ldquo;es&amp;rdquo;, &amp;ldquo;et&amp;rdquo;, &amp;ldquo;eu&amp;rdquo;, &amp;ldquo;fa&amp;rdquo;, &amp;ldquo;fi&amp;rdquo;, &amp;ldquo;fo&amp;rdquo;, &amp;ldquo;fr-CH&amp;rdquo;, &amp;ldquo;fr&amp;rdquo;, &amp;ldquo;gl&amp;rdquo;, &amp;ldquo;he&amp;rdquo;, &amp;ldquo;hr&amp;rdquo;, &amp;ldquo;hu&amp;rdquo;, &amp;ldquo;hy&amp;rdquo;, &amp;ldquo;id&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;it-CH&amp;rdquo;, &amp;ldquo;it&amp;rdquo;, &amp;ldquo;ja&amp;rdquo;, &amp;ldquo;ka&amp;rdquo;, &amp;ldquo;kh&amp;rdquo;, &amp;ldquo;kk&amp;rdquo;, &amp;ldquo;ko&amp;rdquo;, &amp;ldquo;kr&amp;rdquo;, &amp;ldquo;lt&amp;rdquo;, &amp;ldquo;lv&amp;rdquo;, &amp;ldquo;me&amp;rdquo;, &amp;ldquo;mk&amp;rdquo;, &amp;ldquo;mn&amp;rdquo;, &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;nb&amp;rdquo;, &amp;ldquo;nl-BE&amp;rdquo;, &amp;ldquo;nl&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;pl&amp;rdquo;, &amp;ldquo;pt-BR&amp;rdquo;, &amp;ldquo;pt&amp;rdquo;, &amp;ldquo;ro&amp;rdquo;, &amp;ldquo;rs-latin&amp;rdquo;, &amp;ldquo;rs&amp;rdquo;, &amp;ldquo;ru&amp;rdquo;, &amp;ldquo;sk&amp;rdquo;, &amp;ldquo;sl&amp;rdquo;, &amp;ldquo;sq&amp;rdquo;, &amp;ldquo;sr-latin&amp;rdquo;, &amp;ldquo;sr&amp;rdquo;, &amp;ldquo;sv&amp;rdquo;, &amp;ldquo;sw&amp;rdquo;, &amp;ldquo;th&amp;rdquo;, &amp;ldquo;tr&amp;rdquo;, &amp;ldquo;uk&amp;rdquo;, &amp;ldquo;vi&amp;rdquo;, &amp;ldquo;zh-CN&amp;rdquo;, &amp;ldquo;zh-TW&amp;rdquo;。   separator startとendの入力の間に表示する文字列   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    説明 クリックすると日付選択できるカレンダーで、日付の文字列ペアを生成。</description>
    </item>
    
    <item>
      <title>fileInput</title>
      <link>/fileinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/fileinput/</guid>
      <description>fileInput(inputId, label, multiple = FALSE, accept = NULL, width = NULL, buttonLabel = &amp;#34;Browse...&amp;#34;, placeholder = &amp;#34;No file selected&amp;#34;) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   multiple ユーザが複数のファイルを同時にアップロードできるかどうかを論理値で指定します。IE9よりも古いブラウザでは動作しません。   accept サーバが受け付けるファイルの種類をヒントとして与えるために、MIME型の文字ベクトル   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   buttonLabel テキストまたはHTMLタグで指定するボタンのラベル   placeholder ファイルをアップロードする前に表示するテキスト    説明 1つ以上のファイルをアップロードするコントロールを生成。
詳細 使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( sidebarLayout( sidebarPanel( fileInput(&amp;#34;file1&amp;#34;, &amp;#34;Choose CSV File&amp;#34;, accept = c( &amp;#34;text/csv&amp;#34;, &amp;#34;text/comma-separated-values,text/plain&amp;#34;, &amp;#34;.</description>
    </item>
    
    <item>
      <title>passwordInput</title>
      <link>/passwordinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/passwordinput/</guid>
      <description>passwordInput(inputId, label, value = &amp;#34;&amp;#34;, width = NULL, placeholder = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 初期値   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   placeholder コントロールに何を入力するのかをユーザにヒントとして表示する文字列。Internet Explorerの8と9はこのオプションをサポートしません    値 UI定義に追加するテキスト入力コントロール
説明 パスワードを入力するためのコントロールを生成
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( passwordInput(&amp;#34;password&amp;#34;, &amp;#34;Password:&amp;#34;), actionButton(&amp;#34;go&amp;#34;, &amp;#34;Go&amp;#34;), verbatimTextOutput(&amp;#34;value&amp;#34;) ) server &amp;lt;- function(input, output) { output$value &amp;lt;- renderText({ req(input$go) isolate(input$password) }) } shinyApp(ui, server) }</description>
    </item>
    
    <item>
      <title>radioButtons</title>
      <link>/radiobuttons/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/radiobuttons/</guid>
      <description>radioButtons(inputId, label, choices = NULL, selected = NULL, inline = FALSE, width = NULL, choiceNames = NULL, choiceValues = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   choices チェックボックスに表示する値のリスト。リストの要素が名前付けられている場合、値ではなく名前がユーザに表示されます。この引数を指定すると、choiceNamesとchoiceValuesは指定できません。値は文字列で、論理値や数値などの他の型は強制的に文字列になります。   selected 初期状態で選択されている値。指定がない場合は、最初の値となります。   inline TRUEなら、選択したものがインラインで(すなわち横に)表示されます。   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   choiceNames, choiceValues 名前と値のリスト。それぞれアプリケーション内で表示され、それぞれの選択したものに対応します。このため、choiceNamesとchoiceValuesは同じ長さである必要があります。この引数を指定すると、choicesは指定できません。単純なテキストになるchoicesではなく、これら両引数を用いる利点は、choiceNamesには任意の型のUIオブジェクト(タグ、アイコン、HTMLなど)を指定できる点です。例を参照    値 UI定義に追加されるラジオボタンの集合
説明 リストから1つの項目を選択するラジオボタンの集合を生成
詳細 「何も選択していない」状態を表示したい場合、オプションなしを選択したselected = character(0)を用いたデフォルトのラジオボタンにすることが可能です。しかし、これは推奨されません。ユーザが一度選択したその状態を返す方法がユーザにないからです。代わりに、最初の選択をc(&amp;quot;None selected&amp;quot; = &amp;quot;&amp;quot;)とすることが考えられます。</description>
    </item>
    
    <item>
      <title>reactive</title>
      <link>/reactive/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/reactive/</guid>
      <description>https://shiny.rstudio.com/reference/shiny/latest/reactive.html
https://shiny.rstudio.com/reference/shiny/latest/reactive.html</description>
    </item>
    
    <item>
      <title>renderImage</title>
      <link>/renderimage/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/renderimage/</guid>
      <description>renderImage(expr, env = parent.frame(), quoted = FALSE, deleteFile = TRUE, outputArgs = list()) 引数    名前 説明     expr リストを返す式   env 中でexprを評価するための環境   quoted exprに引用符が付いている(quoted()がある)かどうかを指定します。変数内の式を保存したいときに有用です。   deleteFile クライアントのブラウザに送られたfunc()$src中のファイルを削除するかどうかを指定します。一般的に、画像が$func$内で生成された一時ファイルの場合はTRUE、一時ファイルでないならFALSEとします。   outputArgs renderImageを、インタラクティブなR Markdownドキュメントで使用する時に、明示しないimageOutputの呼び出しに渡される引数のリストです。    説明 outputスロットに割り当てる適切な画像を描画します。
詳細 式exprは、webページ上のimgオブジェクト属性を持つリストを必ず返します。画像を正しく表示するために、リストsrcに画像ファイルへのパスとなるエントリが少なくとも1つは必要となります。contextTypeで、画像のMIME型を指定するエントリを持つのが有用です。指定がない場合には、renderImageでファイルの拡張子に基づいて型を自動的に検出します。
widthやheight, class, altなどの他の要素も、リストに加えられます。追加の要素は、imgオブジェクトの属性として使用されます。
対応するHTML出力のタグは、divまたはimgで、CSSのクラス名はshiny-image-outputとなります。
使用例 ## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE) ui &amp;lt;- fluidPage( sliderInput(&amp;#34;n&amp;#34;, &amp;#34;Number of observations&amp;#34;, 2, 1000, 500), plotOutput(&amp;#34;plot1&amp;#34;), plotOutput(&amp;#34;plot2&amp;#34;), plotOutput(&amp;#34;plot3&amp;#34;) ) server &amp;lt;- function(input, output, session) { # A plot of fixed size output$plot1 &amp;lt;- renderImage({ # A temp file to save the output.</description>
    </item>
    
    <item>
      <title>renderPlot</title>
      <link>/renderplot/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/renderplot/</guid>
      <description>renderPlot(expr, width = &amp;#34;auto&amp;#34;, height = &amp;#34;auto&amp;#34;, res = 72, ..., env = parent.frame(), quoted = FALSE, execOnResize = FALSE, outputArgs = list()) 引数    名前 説明     expr プロットを生成する式   width, height 描画するプロットの高さと幅をピクセルで指定します。autoを指定して、HTMLのoffsetWidthとoffsetHeightを用いることもできます。インラインでプロットするときには、数値でwidthとheightを必ず指定します。   res インチ単位のピクセル解像度を指定します。この値は、pngに渡されます。Rで描画するPNGの解像度を変えるのであって、ブラウザの実際のppiを変えるわけではないことに注意してください。   ... 幅、高さや背景色などのpngに渡す引数   env 中でexprを評価するための環境   quoted exprに引用符が付いている(quoted()がある)かどうかを指定します。変数内の式を保存したいときに有用です。   execOnResize (デフォルトの)FALSEなら、プロットのサイズ決定が繰り返され、Shinyはexprの再実行の代わりに、replayPlot()コマンドでプロットの描画を繰り返します。これにより、高速な再描画が可能となります。まれに望ましくない場合もあります。プロットのサイズ決定やり直しに問題がある場合に、TRUEを設定してShinyのコードを再実行することができます。   outputArgs renderImageを、インタラクティブなR Markdownドキュメントで使用する時に、明示しないimageOutputの呼び出しに渡される引数のリストです。    説明 出力スロットに割り当てるのに適したリアクティブなプロットを描画します。</description>
    </item>
    
    <item>
      <title>renderPrint</title>
      <link>/renderprint/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/renderprint/</guid>
      <description>renderPrint(expr, env = parent.frame(), quoted = FALSE, width = getOption(&amp;#34;width&amp;#34;), outputArgs = list()) 引数    名前 説明     expr 出力を印字、または印字可能なRオブジェクトを返す式   env 中でexprを評価するための環境   quoted exprに引用符が付いている(quoted()がある)かどうかを指定します。変数内の式を保存したいときに有用です。   width options(&#39;width&#39;)の値   outputArgs renderPrintを、インタラクティブなR Markdownドキュメントで使用する時に、明示しないverbatimTextOutputの呼び出しに渡される引数のリスト    説明 印字する出力をキャプチャする関数のリアクティブなバージョンを生成します。また、印字可能な出力を(見えなかったとしても)キャプチャし、文字列にします。結果の関数は、出力スロットへの割当に適しています。
詳細 対応するHTML出力タグは、任意で何にでも成り(monospaceフォントとwhitespaceをpreserveしたいなら、preが推奨されます)、CSSのクラス名はshiny-text-outputを持ちます。
関数の実行結果は、capture.output呼び出しの内部で印字されます。
大半のShinyの出力関数と違い、NULLもNULLであることが見えるように出力されます。NULLで何も表示しないためには、関数がinvisible()を返すようにしなければならないことにちゅうしてください。
使用例 isolate({ # renderPrint captures any print output, converts it to a string, and # returns it visFun &amp;lt;- renderPrint({ &amp;#34;foo&amp;#34; }) visFun() # &amp;#39;[1] &amp;#34;foo&amp;#34;&amp;#39; invisFun &amp;lt;- renderPrint({ invisible(&amp;#34;foo&amp;#34;) }) invisFun() # &amp;#39;&amp;#39; multiprintFun &amp;lt;- renderPrint({ print(&amp;#34;foo&amp;#34;); &amp;#34;bar&amp;#34; }) multiprintFun() # &amp;#39;[1] &amp;#34;foo&amp;#34;\n[1] &amp;#34;bar&amp;#34;&amp;#39; nullFun &amp;lt;- renderPrint({ NULL }) nullFun() # &amp;#39;NULL&amp;#39; invisNullFun &amp;lt;- renderPrint({ invisible(NULL) }) invisNullFun() # &amp;#39;&amp;#39; vecFun &amp;lt;- renderPrint({ 1:5 }) vecFun() # &amp;#39;[1] 1 2 3 4 5&amp;#39; # Contrast with renderText, which takes the value returned from the function # and uses cat() to convert it to a string visFun &amp;lt;- renderText({ &amp;#34;foo&amp;#34; }) visFun() # &amp;#39;foo&amp;#39; invisFun &amp;lt;- renderText({ invisible(&amp;#34;foo&amp;#34;) }) invisFun() # &amp;#39;foo&amp;#39; multiprintFun &amp;lt;- renderText({ print(&amp;#34;foo&amp;#34;); &amp;#34;bar&amp;#34; }) multiprintFun() # &amp;#39;bar&amp;#39; nullFun &amp;lt;- renderText({ NULL }) nullFun() # &amp;#39;&amp;#39; invisNullFun &amp;lt;- renderText({ invisible(NULL) }) invisNullFun() # &amp;#39;&amp;#39; vecFun &amp;lt;- renderText({ 1:5 }) vecFun() # &amp;#39;1 2 3 4 5&amp;#39; }) [1] &amp;#34;foo&amp;#34; [1] &amp;#34;1 2 3 4 5&amp;#34;</description>
    </item>
    
    <item>
      <title>renderTable</title>
      <link>/rendertable/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/rendertable/</guid>
      <description>renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE, spacing = c(&amp;#34;s&amp;#34;, &amp;#34;xs&amp;#34;, &amp;#34;m&amp;#34;, &amp;#34;l&amp;#34;), width = &amp;#34;auto&amp;#34;, align = NULL, rownames = FALSE, colnames = TRUE, digits = NULL, na = &amp;#34;NA&amp;#34;, ..., env = parent.frame(), quoted = FALSE, outputArgs = list()) 引数    名前 説明     expr xtableで使用可能なRのオブジェクトを返す式   striped, hover, bordered 論理値で、TRUEなら出力する表に対応するBootstrapの表フォーマットを適用します。   spacing 表の行間のスペースを指定します。xsは「extra small」の略で、sは「small」、mは「medum」で、lは「large」です。   width 表の幅。CSSの単位(100やauto)、またはpxを単位にした長さを指定する文字列   align 列のアラインメントを文字列で指定します。l, c, rでそれぞれ列の左、中央右にアラインメントされます。文字列の長さは、表と同じになります(rawnames = TRUEなら、ncol()+1)。i番目の文字が、i番目の列に対応します。?</description>
    </item>
    
    <item>
      <title>renderText</title>
      <link>/rendertext/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/rendertext/</guid>
      <description>renderText(expr, env = parent.frame(), quoted = FALSE, outputArgs = list()) 引数    名前 説明     expr xtableで使用可能なRのオブジェクトを返す式   env 中でexprを評価するための環境   quoted exprに引用符が付いている(quoted()がある)かどうかを指定します。変数内の式を保存したいときに有用です。   outputArgs renderTextを、インタラクティブなR Markdownドキュメントで使用する時に、明示しないtextOutputの呼び出しに渡される引数のリスト    説明 catで結果を単独要素の文字ベクトルに変える関数のリアクティブなバージョンを生成します。
詳細 対応するHTMLの出力タグは、何にでもなります(monospaceフォントとwhitespaceを保存するなら、preが推奨されます)。そして、CSSのクラス名としてshiny-text-outputを持ちます。
関数の実行結果は、capture.output呼び出しの内部でcatに渡されます。
使用例 isolate({ # renderPrint captures any print output, converts it to a string, and # returns it visFun &amp;lt;- renderPrint({ &amp;#34;foo&amp;#34; }) visFun() # &amp;#39;[1] &amp;#34;foo&amp;#34;&amp;#39; invisFun &amp;lt;- renderPrint({ invisible(&amp;#34;foo&amp;#34;) }) invisFun() # &amp;#39;&amp;#39; multiprintFun &amp;lt;- renderPrint({ print(&amp;#34;foo&amp;#34;); &amp;#34;bar&amp;#34; }) multiprintFun() # &amp;#39;[1] &amp;#34;foo&amp;#34;\n[1] &amp;#34;bar&amp;#34;&amp;#39; nullFun &amp;lt;- renderPrint({ NULL }) nullFun() # &amp;#39;NULL&amp;#39; invisNullFun &amp;lt;- renderPrint({ invisible(NULL) }) invisNullFun() # &amp;#39;&amp;#39; vecFun &amp;lt;- renderPrint({ 1:5 }) vecFun() # &amp;#39;[1] 1 2 3 4 5&amp;#39; # Contrast with renderText, which takes the value returned from the function # and uses cat() to convert it to a string visFun &amp;lt;- renderText({ &amp;#34;foo&amp;#34; }) visFun() # &amp;#39;foo&amp;#39; invisFun &amp;lt;- renderText({ invisible(&amp;#34;foo&amp;#34;) }) invisFun() # &amp;#39;foo&amp;#39; multiprintFun &amp;lt;- renderText({ print(&amp;#34;foo&amp;#34;); &amp;#34;bar&amp;#34; }) multiprintFun() # &amp;#39;bar&amp;#39; nullFun &amp;lt;- renderText({ NULL }) nullFun() # &amp;#39;&amp;#39; invisNullFun &amp;lt;- renderText({ invisible(NULL) }) invisNullFun() # &amp;#39;&amp;#39; vecFun &amp;lt;- renderText({ 1:5 }) vecFun() # &amp;#39;1 2 3 4 5&amp;#39; }) [1] &amp;#34;foo&amp;#34; [1] &amp;#34;1 2 3 4 5&amp;#34;</description>
    </item>
    
    <item>
      <title>renderUI</title>
      <link>/renderui/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/renderui/</guid>
      <description>renderUI(expr, env = parent.frame(), quoted = FALSE, outputArgs = list()) 引数    名前 説明     expr Shinyのタグオブジェクト、HTML、またはそれらのリストを返す式   env 中でexprを評価するための環境   quoted exprに引用符が付いている(quoted()がある)かどうかを指定します。変数内の式を保存したいときに有用です。   outputArgs renderUIを、インタラクティブなR Markdownドキュメントで使用する時に、明示しないuiOutputの呼び出しに渡される引数のリスト    説明 実験的な機能です。ShinyのUIライブラリを用いてHTMLを生成する関数のリアクティブなバージョンを生成します。
詳細 出力するHTMLの出力タグはdivで、CSSのクラス名にshiny-html-outputを持ちます(またはuiOutputを使用します)。
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( uiOutput(&amp;#34;moreControls&amp;#34;) ) server &amp;lt;- function(input, output) { output$moreControls &amp;lt;- renderUI({ tagList( sliderInput(&amp;#34;n&amp;#34;, &amp;#34;N&amp;#34;, 1, 1000, 500), textInput(&amp;#34;label&amp;#34;, &amp;#34;Label&amp;#34;) ) }) } shinyApp(ui, server) }</description>
    </item>
    
    <item>
      <title>selectInput</title>
      <link>/selectinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/selectinput/</guid>
      <description>selectInput(inputId, label, choices, selected = NULL, multiple = FALSE, selectize = TRUE, width = NULL, size = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   choices チェックボックスに表示する値のリスト。リストの要素が名前付けられている場合、値ではなく名前がユーザに表示されます。この引数を指定すると、choiceNamesとchoiceValuesは指定できません。値は文字列で、論理値や数値などの他の型は強制的に文字列になります。   selected 初期状態で選択されている値   multiple 複数の選択を許すかどうかを論理値で指定   selectize selectize.jsを使うかどうかを指定   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   size 選択ボックスの中に表示する項目数を指定。大きくすると縦に長いボックスとなります。selectize = TRUEとは共存できません。通常、multiple = FALSEのときに、ドロップダウンリストとなりますが、sizeを設定すると、一つのボックスになります。   options オプションのリスト。どのようなオプションを指定可能かは、selectize.jsのドキュメントを参照してください。(I()内の文字オプションの値はリテラルのJavaScriptコードとして扱われます。詳細はrenderDataTable()を参照してください)    値 UI定義に追加されるHTML要素のリスト。</description>
    </item>
    
    <item>
      <title>sliderInput</title>
      <link>/sliderinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/sliderinput/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>tableOutput</title>
      <link>/tableoutput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/tableoutput/</guid>
      <description>tableOutput(outputId) 引数    名前 説明     outputId 表を読み込む出力変数    値 パネル内に含まれる表出力要素
説明 アプリケーションページ内で、renderTableまたはrenderDataTableをレンダリングします。renderTableは標準的なHTMLの表を使用します。renderDataTableは、JavascriptライブラリのDataTablesをインタラクティブでさらに機能を持つ表を生成するために使用します。
使用例 ## Only run this example in interactive R sessions if (interactive()) { # table example shinyApp( ui = fluidPage( fluidRow( column(12, tableOutput(&amp;#39;table&amp;#39;) ) ) ), server = function(input, output) { output$table &amp;lt;- renderTable(iris) } ) # DataTables example shinyApp( ui = fluidPage( fluidRow( column(12, dataTableOutput(&amp;#39;table&amp;#39;) ) ) ), server = function(input, output) { output$table &amp;lt;- renderDataTable(iris) } ) } 参照 https://shiny.</description>
    </item>
    
    <item>
      <title>textInput</title>
      <link>/textinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/textinput/</guid>
      <description>textInput(inputId, label, value = &amp;#34;&amp;#34;, width = NULL, placeholder = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 初期値   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   placeholder コントロールに何を入力するのかをユーザにヒントとして表示する文字列。Internet Explorerの8と9はこのオプションをサポートしません    値 UI定義に追加するテキスト入力コントロール
説明 構造化されていないテキストの値を入力するためのコントロールを生成
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( textInput(&amp;#34;caption&amp;#34;, &amp;#34;Caption&amp;#34;, &amp;#34;Data Summary&amp;#34;), verbatimTextOutput(&amp;#34;value&amp;#34;) ) server &amp;lt;- function(input, output) { output$value &amp;lt;- renderText({ input$caption }) } shinyApp(ui, server) }</description>
    </item>
    
    <item>
      <title>verbatimTextOutput</title>
      <link>/verbatimtextoutput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/verbatimtextoutput/</guid>
      <description>verbatimTextOutput(outputId, placeholder = FALSE) 引数    名前 説明     outputId 値を読み込む出力変数   placeholder 出力が空またはNULLの場合に、空の長方形が表示されるかどうかを指定します。(出力が空でないときの動作には影響しません)    値 パネル内に含まれる文字通りのテキスト出力要素
説明 アプリケーションのページ内で文字通りのテキストとしてリアクティブな出力変数をレンダリングします。テキストには、HTMLのタグが含まれます。
詳細 テキストは、レンダリングよりも優先してHTMLをエスケープします。この要素は、固定幅でフォーマットされたプリントオブジェクトを保存するためにrenderPrint関数で使用されます。
Examples ## Only run this example in interactive R sessions if (interactive()) { shinyApp( ui = basicPage( textInput(&amp;#34;txt&amp;#34;, &amp;#34;Enter the text to display below:&amp;#34;), verbatimTextOutput(&amp;#34;default&amp;#34;), verbatimTextOutput(&amp;#34;placeholder&amp;#34;, placeholder = TRUE) ), server = function(input, output) { output$default &amp;lt;- renderText({ input$txt }) output$placeholder &amp;lt;- renderText({ input$txt }) } ) }</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>作成中。
You can contact me.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>R Markdown 記法</title>
      <link>/rmarkdown-syntax/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/rmarkdown-syntax/</guid>
      <description>見出し# Header 1## Header 2Header 1Header 2図image:![caption](img/shiny-400x464.png)markdown記法では埋め込めませんでした。HTMLのタグで埋め込みます。
&amp;lt;img src=&amp;#39;../../../../../../../img/shiny-400x464.png&amp;#39; align=&amp;#39;center&amp;#39;&amp;gt;リンク上記の、Shinyのロゴは、RStudioのロゴで、[リンク先のガイドライン](https://www.rstudio.com/about/logos/)に従って利用できます。上記の、Shinyのロゴは、RStudioのロゴで、リンク先のガイドラインに従って利用できます。
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/rmarkdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>