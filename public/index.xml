<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny クックブック</title>
    <link>/</link>
    <description>Recent content on Shiny クックブック</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>© 2018 qhmqk</copyright>
    <lastBuildDate>Wed, 10 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>トップページ</title>
      <link>/top-page/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/top-page/</guid>
      <description>今すぐ始めるShiny
Rは世界中で広く使用されているプログラミング言語です。ShinyはRのパッケージの一つで、Rによる分析結果を動的なwebアプリケーションとして公開することができます。
test link
RもShinyもフリーかつオープンソースのソフトウェアとして、開発が進められています。Rは、多くのプログラミング言語と同様に、Windows、Mac OS、Linuxなどさまざまなプラットフォーム上で動作します。そのため、Shinyによるwebアプリケーション開発もプラットフォームは問いません。
Shinyを開発しているのはRStudio Inc.で、メインの開発者はRStudioのCTOであるJoe Cheng氏です。
Rでの分析結果を動的にwebアプリケーションにしたい、webアプリケーションに統計や機械学習を組み合わせたい、そんなニーズにこたえる最高の環境がShinyです。Shinyのインストールから、アプリケーションの作成までを紹介します。
すぐに始められるShiny Shinyでwebアプリケーション開発を始める人の大半はすでにRのユーザかもしれませんが、Shinyが気になって開発環境を整えたい人もいるかもしれません。Rはダウンロードしてインストールすればすぐにプログラミングを始めることができます。さらに、統合開発環境として、これ以上ないくらい便利なRStudioをインストールすれば、エディタからShinyの動作確認までボタン一つでできるようになります。インストール作業は、3つだけで初期設定の煩雑さはありません。
 Rをインストール
 RStudioをインストール
 Shinyパッケージをインストール
  Rをインストール CRAN(The Comprehensive R Archive Network)からインストーラをダウンロードします。Linux、Mac、Windowsなどのプラットフォームに合わせてバイナリを選択します。
ダウンロードしたR-***.exeを実行し、ウィザードを進めていけば、インストールが完了します。
RStudioをインストール RStudioの公式サイトからインストーラをダウンロードします。フリーのRStudio Desctop Open Source Licenseを選択し、Windwos、Mac、Linux (Ubuntu, Fedora)などのプラットフォームに合わせたバイナリを選択します。
Shinyパッケージをインストール RStudioを起動し、パッケージをインストールします。console枠で、
install.packages(&amp;quot;shiny&amp;quot;)  を実行すると、Shinyパッケージのインストールが始まります。パッケージをインストール後、Shinyを実行するために以下のコマンドでパッケージをロードします。
library(shiny)  Shinyのシンプルな設計 Shinyを構成する要素は大きく２つだけ、ユーザーインターフェース(ui)とサーバ(server)です。ユーザーインターフェースにはレイアウトやコントロールの配置を記述し、サーバにはユーザーインターフェースに表示する数値やグラフを計算する処理を記述します。
ディレクトリを作り、ディレクトリの中にapp.Rというファイルを置いて、runApp()を実行するだけでShinyアプリケーションが実行されます。最もシンプルなapp.Rは以下のコードとなります。
library(shiny) ui &amp;lt;- fluidPage() server &amp;lt;- function(input, output){} shinyApp(ui = ui, server = server)  このままでは、空のアプリケーションなので、数値入力とヒストグラム表示を追加すると、以下のコードとなります。
library(shiny) ui &amp;lt;- fluidPage( numericInput(inputId = &amp;quot;n&amp;quot;, &amp;quot;Sample size&amp;quot;, value = 25), plotOutput(outputId = &amp;quot;hist&amp;quot;) ) server &amp;lt;- function(input, output){ output$hist &amp;lt;- renderPlot({ hist(rnorm(input$n)) }) } shinyApp(ui = ui, server = server)  一つのファイルにまとめて記述するだけでなく、ui.</description>
    </item>
    
    <item>
      <title>索引(アルファベット)</title>
      <link>/function-index/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/function-index/</guid>
      <description> A  actionButton
B C checkboxGroupInput
 checkboxInput
D dateInput
 dateRangeInput
E F G H I J K L M N O P Q R S T U V W X Y Z  </description>
    </item>
    
    <item>
      <title>索引(機能別)</title>
      <link>/reference/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/reference/</guid>
      <description>UI Inputs  actionButton
 checkboxGroupInput
 checkboxInput
 dateInput
 dateRangeInput
  UI Outputs UI Layout Rendering functions Reactive programming https://shiny.rstudio.com/reference/shiny/1.0.5/</description>
    </item>
    
    <item>
      <title>actionButton</title>
      <link>/actionbutton/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/actionbutton/</guid>
      <description>actionButton(inputId, label, icon = NULL, width = NULL, ...)  引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label ボタンのコンテンツ。文字列を指定するとテキストラベルになり、HTMLを使って画像を指定することもできます。   icon (オプションで)ボタン上に現れるアイコン   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   ... ボタンに適用する名前付きの属性    説明 初期値がゼロのアクションボタンを生成し、押されるたびに値を1ずつ増やします。
使用例  labelに画像を指定
 iconを使用
 inputIdに応じてlabelを変更
  参照 RStudioのReference
http://shiny.rstudio.com/articles/action-buttons.html
https://shiny.rstudio.com/reference/shiny/latest/actionButton.html</description>
    </item>
    
    <item>
      <title>checkboxGroupInput</title>
      <link>/checkboxgroupinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/checkboxgroupinput/</guid>
      <description>checkboxGroupInput(inputId, label, choices = NULL, selected = NULL, inline = FALSE, width = NULL, choiceNames = NULL, choiceValues = NULL) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   choices チェックボックスに表示する値のリスト。リストの要素が名前付けられている場合、値ではなく名前がユーザに表示されます。この引数を指定すると、choiceNamesとchoiceValuesは指定できません。値は文字列で、論理値や数値などの他の型は強制的に文字列になります。   selected 初期状態で選択されている値   inline TRUEなら、選択したものがインラインで表示されます。   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   choiceNames, choiceValues 名前と値のリスト。それぞれアプリケーション内で表示され、それぞれの選択したものに対応します。このため、choiceNamesとchoiceValuesは同じ長さである必要があります。この引数を指定すると、choicesは指定できません。単純なテキストになるchoicesではなく、これら両引数を用いる利点は、choiceNamesには任意の型のUIオブジェクト(タグ、アイコン、HTMLなど)を指定できる点です。例を参照    値 UI定義に追加されるHTML要素のリスト
説明 それぞれ独立で選択できるトグルスイッチ形式のチェックボックスの組を生成します。選択された値の文字列ベクトルが、入力としてサーバに渡されます。
使用例  choices
 inlineをTRUE</description>
    </item>
    
    <item>
      <title>checkboxInput</title>
      <link>/checkboxinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/checkboxinput/</guid>
      <description>checkboxInput(inputId, label, value = FALSE, width = NULL)  引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 初期値(論理値でTRUEまたはFALSE)   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    値 UI定義に追加されるチェックボックスのコントロール。
説明 論理値を指定するために使用するチェックボックスを生成。
使用例 ## Only run examples in interactive R sessions if (interactive()) { ui &amp;lt;- fluidPage( checkboxInput(&amp;quot;somevalue&amp;quot;, &amp;quot;Some value&amp;quot;, FALSE), verbatimTextOutput(&amp;quot;value&amp;quot;) ) server &amp;lt;- function(input, output) { output$value &amp;lt;- renderText({ input$somevalue }) } shinyApp(ui, server) }  参照 RStudioのReference</description>
    </item>
    
    <item>
      <title>dateInput</title>
      <link>/dateinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/dateinput/</guid>
      <description>dateInput(inputId, label, value = NULL, min = NULL, max = NULL, format = &amp;quot;yyyy-mm-dd&amp;quot;, startview = &amp;quot;month&amp;quot;, weekstart = 0, language = &amp;quot;en&amp;quot;, width = NULL)  引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   value 開始日。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、NULLならクライアントのタイムゾーンの現在の日付となります。   min 最も昔の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   max 最も後の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   format ブラウザに表示する日付のフォーマット。デフォルトはyyyy-mm-dd。   startview 最初の入力オブジェクトがクリックされたときに表示される日付の範囲。&amp;rdquo;month&amp;rdquo;, &amp;ldquo;year&amp;rdquo;, &amp;ldquo;decade&amp;rdquo;を指定します。デフォルトは&amp;rdquo;month&amp;rdquo;。   weekstart 週の最初の日を0(日曜日)～6(土曜日)の整数で指定します。   language 月と日の名前に使用する言語を指定します。デフォルトは&amp;rdquo;en&amp;rdquo;で英語。他に指定可能な値は、&amp;rdquo;ar&amp;rdquo;, &amp;ldquo;az&amp;rdquo;, &amp;ldquo;bg&amp;rdquo;, &amp;ldquo;bs&amp;rdquo;, &amp;ldquo;ca&amp;rdquo;, &amp;ldquo;cs&amp;rdquo;, &amp;ldquo;cy&amp;rdquo;, &amp;ldquo;da&amp;rdquo;, &amp;ldquo;de&amp;rdquo;, &amp;ldquo;el&amp;rdquo;, &amp;ldquo;en-AU&amp;rdquo;, &amp;ldquo;en-GB&amp;rdquo;, &amp;ldquo;eo&amp;rdquo;, &amp;ldquo;es&amp;rdquo;, &amp;ldquo;et&amp;rdquo;, &amp;ldquo;eu&amp;rdquo;, &amp;ldquo;fa&amp;rdquo;, &amp;ldquo;fi&amp;rdquo;, &amp;ldquo;fo&amp;rdquo;, &amp;ldquo;fr-CH&amp;rdquo;, &amp;ldquo;fr&amp;rdquo;, &amp;ldquo;gl&amp;rdquo;, &amp;ldquo;he&amp;rdquo;, &amp;ldquo;hr&amp;rdquo;, &amp;ldquo;hu&amp;rdquo;, &amp;ldquo;hy&amp;rdquo;, &amp;ldquo;id&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;it-CH&amp;rdquo;, &amp;ldquo;it&amp;rdquo;, &amp;ldquo;ja&amp;rdquo;, &amp;ldquo;ka&amp;rdquo;, &amp;ldquo;kh&amp;rdquo;, &amp;ldquo;kk&amp;rdquo;, &amp;ldquo;ko&amp;rdquo;, &amp;ldquo;kr&amp;rdquo;, &amp;ldquo;lt&amp;rdquo;, &amp;ldquo;lv&amp;rdquo;, &amp;ldquo;me&amp;rdquo;, &amp;ldquo;mk&amp;rdquo;, &amp;ldquo;mn&amp;rdquo;, &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;nb&amp;rdquo;, &amp;ldquo;nl-BE&amp;rdquo;, &amp;ldquo;nl&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;pl&amp;rdquo;, &amp;ldquo;pt-BR&amp;rdquo;, &amp;ldquo;pt&amp;rdquo;, &amp;ldquo;ro&amp;rdquo;, &amp;ldquo;rs-latin&amp;rdquo;, &amp;ldquo;rs&amp;rdquo;, &amp;ldquo;ru&amp;rdquo;, &amp;ldquo;sk&amp;rdquo;, &amp;ldquo;sl&amp;rdquo;, &amp;ldquo;sq&amp;rdquo;, &amp;ldquo;sr-latin&amp;rdquo;, &amp;ldquo;sr&amp;rdquo;, &amp;ldquo;sv&amp;rdquo;, &amp;ldquo;sw&amp;rdquo;, &amp;ldquo;th&amp;rdquo;, &amp;ldquo;tr&amp;rdquo;, &amp;ldquo;uk&amp;rdquo;, &amp;ldquo;vi&amp;rdquo;, &amp;ldquo;zh-CN&amp;rdquo;, &amp;ldquo;zh-TW&amp;rdquo;。   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    説明 クリックすると日付選択できるカレンダーが表示されるテキスト入力を生成。</description>
    </item>
    
    <item>
      <title>dateRangeInput</title>
      <link>/daterangeinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/daterangeinput/</guid>
      <description>dateRangeInput(inputId, label, start = NULL, end = NULL, min = NULL, max = NULL, format = &amp;quot;yyyy-mm-dd&amp;quot;, startview = &amp;quot;month&amp;quot;, weekstart = 0, language = &amp;quot;en&amp;quot;, separator = &amp;quot; to &amp;quot;, width = NULL)  引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label ボタンのコンテンツ。文字列を指定するとテキストラベルになり、HTMLを使って画像を指定することもできます。   start 開始日の初期値。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、現在のタイムゾーンの値が入ります。   end 終了日の初期値。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。デフォルトはNULLで、現在のタイムゾーンの値が入ります。   min 最も昔の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   max 最も後の日付。データオブジェクト、またはyyyy-mm-ddというフォーマットの文字列。   format ブラウザに表示する日付のフォーマット。デフォルトはyyyy-mm-dd。   startview 最初の入力オブジェクトがクリックされたときに表示される日付の範囲。&amp;rdquo;month&amp;rdquo;, &amp;ldquo;year&amp;rdquo;, &amp;ldquo;decade&amp;rdquo;を指定します。デフォルトは&amp;rdquo;month&amp;rdquo;。   weekstart 週の最初の日を0(日曜日)～6(土曜日)の整数で指定します。   language 月と日の名前に使用する言語を指定します。デフォルトは&amp;rdquo;en&amp;rdquo;で英語。他に指定可能な値は、&amp;rdquo;ar&amp;rdquo;, &amp;ldquo;az&amp;rdquo;, &amp;ldquo;bg&amp;rdquo;, &amp;ldquo;bs&amp;rdquo;, &amp;ldquo;ca&amp;rdquo;, &amp;ldquo;cs&amp;rdquo;, &amp;ldquo;cy&amp;rdquo;, &amp;ldquo;da&amp;rdquo;, &amp;ldquo;de&amp;rdquo;, &amp;ldquo;el&amp;rdquo;, &amp;ldquo;en-AU&amp;rdquo;, &amp;ldquo;en-GB&amp;rdquo;, &amp;ldquo;eo&amp;rdquo;, &amp;ldquo;es&amp;rdquo;, &amp;ldquo;et&amp;rdquo;, &amp;ldquo;eu&amp;rdquo;, &amp;ldquo;fa&amp;rdquo;, &amp;ldquo;fi&amp;rdquo;, &amp;ldquo;fo&amp;rdquo;, &amp;ldquo;fr-CH&amp;rdquo;, &amp;ldquo;fr&amp;rdquo;, &amp;ldquo;gl&amp;rdquo;, &amp;ldquo;he&amp;rdquo;, &amp;ldquo;hr&amp;rdquo;, &amp;ldquo;hu&amp;rdquo;, &amp;ldquo;hy&amp;rdquo;, &amp;ldquo;id&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;it-CH&amp;rdquo;, &amp;ldquo;it&amp;rdquo;, &amp;ldquo;ja&amp;rdquo;, &amp;ldquo;ka&amp;rdquo;, &amp;ldquo;kh&amp;rdquo;, &amp;ldquo;kk&amp;rdquo;, &amp;ldquo;ko&amp;rdquo;, &amp;ldquo;kr&amp;rdquo;, &amp;ldquo;lt&amp;rdquo;, &amp;ldquo;lv&amp;rdquo;, &amp;ldquo;me&amp;rdquo;, &amp;ldquo;mk&amp;rdquo;, &amp;ldquo;mn&amp;rdquo;, &amp;ldquo;ms&amp;rdquo;, &amp;ldquo;nb&amp;rdquo;, &amp;ldquo;nl-BE&amp;rdquo;, &amp;ldquo;nl&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;pl&amp;rdquo;, &amp;ldquo;pt-BR&amp;rdquo;, &amp;ldquo;pt&amp;rdquo;, &amp;ldquo;ro&amp;rdquo;, &amp;ldquo;rs-latin&amp;rdquo;, &amp;ldquo;rs&amp;rdquo;, &amp;ldquo;ru&amp;rdquo;, &amp;ldquo;sk&amp;rdquo;, &amp;ldquo;sl&amp;rdquo;, &amp;ldquo;sq&amp;rdquo;, &amp;ldquo;sr-latin&amp;rdquo;, &amp;ldquo;sr&amp;rdquo;, &amp;ldquo;sv&amp;rdquo;, &amp;ldquo;sw&amp;rdquo;, &amp;ldquo;th&amp;rdquo;, &amp;ldquo;tr&amp;rdquo;, &amp;ldquo;uk&amp;rdquo;, &amp;ldquo;vi&amp;rdquo;, &amp;ldquo;zh-CN&amp;rdquo;, &amp;ldquo;zh-TW&amp;rdquo;。   separator startとendの入力の間に表示する文字列   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照    説明 クリックすると日付選択できるカレンダーで、日付の文字列ペアを生成。</description>
    </item>
    
    <item>
      <title>fileInput</title>
      <link>/fileinput/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/fileinput/</guid>
      <description>fileInput(inputId, label, multiple = FALSE, accept = NULL, width = NULL, buttonLabel = &amp;#34;Browse...&amp;#34;, placeholder = &amp;#34;No file selected&amp;#34;) 引数    名前 説明     inputId 値にアクセスするために使用するinputのスロット   label コントロールに表示するラベル。NULLならラベル無し   multiple ユーザが複数のファイルを同時にアップロードできるかどうかを論理値で指定します。IE9よりも古いブラウザでは動作しません。   accept サーバが受け付けるファイルの種類をヒントとして与えるために、MIME型の文字ベクトル   width &amp;lsquo;400px&amp;rsquo;や&amp;rsquo;100%&amp;lsquo;などの形式で幅を指定。詳細はvalidateCssUnitを参照   buttonLabel テキストまたはHTMLタグで指定するボタンのラベル   placeholder ファイルをアップロードする前に表示するテキスト    説明 1つ以上のファイルをアップロードするコントロールを生成。
詳細 使用例 ## Only run examples in interactive R sessions if (interactive()) {ui &amp;lt;- fluidPage(sidebarLayout(sidebarPanel(fileInput(&amp;#34;file1&amp;#34;, &amp;#34;Choose CSV File&amp;#34;,accept = c(&amp;#34;text/csv&amp;#34;,&amp;#34;text/comma-separated-values,text/plain&amp;#34;,&amp;#34;.</description>
    </item>
    
    <item>
      <title>reactive</title>
      <link>/reactive/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/reactive/</guid>
      <description>https://shiny.rstudio.com/reference/shiny/latest/reactive.html
https://shiny.rstudio.com/reference/shiny/latest/reactive.html</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>R Markdown 記法</title>
      <link>/rmarkdown-syntax/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/rmarkdown-syntax/</guid>
      <description>見出し# Header 1## Header 2Header 1Header 2図image:![caption](img/shiny-400x464.png)markdown記法では埋め込めませんでした。HTMLのタグで埋め込みます。
&amp;lt;img src=&amp;#39;../../../../../../../img/shiny-400x464.png&amp;#39; align=&amp;#39;center&amp;#39;&amp;gt;リンク上記の、Shinyのロゴは、RStudioのロゴで、[リンク先のガイドライン](https://www.rstudio.com/about/logos/)に従って利用できます。上記の、Shinyのロゴは、RStudioのロゴで、リンク先のガイドラインに従って利用できます。
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/rmarkdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>